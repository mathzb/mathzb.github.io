{"config":{"lang":["da"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hjem","text":"<p>Dette er dokumentation for baungrd.dk.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"docker/docker-compose/","title":"Docker compose","text":"<pre><code>version: \"3\"\nservices:\n  NginxProxyManager:\n    image: \"jc21/nginx-proxy-manager:latest\"\n    container_name: NginxProxyManager\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"81:81\"\n      - \"443:443\"\n    environment:\n      - DB_MYSQL_HOST=db.baungrd.dk\n      - DB_MYSQL_PORT=3306\n      - DB_MYSQL_USER=npm\n      - DB_MYSQL_PASSWORD=PASSWORD\n      - DB_MYSQL_NAME=npm\n      - DISABLE_IPV6=true\n    volumes:\n      - /home/mathzb/docker/npm/data:/data\n      - /home/mathzb/docker/npm/letsencrypt:/etc/letsencrypt\n\n  teamspeak:\n    image: \"mbentley/teamspeak\"\n    container_name: teamspeak\n    restart: unless-stopped\n    ports:\n      - \"9987:9987/udp\"\n      - \"30033:30033\"\n      - \"10011:10011\"\n      - \"41144:41144\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TS3SERVER_GDPR_SAVE=false\n      - TS3SERVER_LICENSE=accept\n      - serveradmin_password=PASSWORD\n    volumes:\n      - /home/mathzb/docker/teamspeak/data:/data\n\n  vaultwarden:\n    image: \"vaultwarden/server:latest\"\n    container_name: vaultwarden\n    restart: unless-stopped\n    ports:\n      - \"8081:80\"\n    environment:\n      - ADMIN_TOKEN=\n      - WEBSOCKET_ENABLED=true\n      - DATABASE_URL=mysql://vaultwarden:PASSWORD@db.baungrd.dk:3306/vaultwarden\n    volumes:\n      - /home/mathzb/docker/vaultwarden:/data\n\n  plex:\n    image: lscr.io/linuxserver/plex:latest\n    container_name: plex\n    network_mode: host\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - VERSION=docker\n      - PLEX_CLAIM=\n    volumes:\n      - \"/home/mathzb/docker/plex:/config\"\n      - \"/home/mathzb:/storage:rw\"\n      - \"/home/mathzb/docker/xteve/data:/epg:rw\"\n    restart: unless-stopped\n\n  deluge:\n    image: lscr.io/linuxserver/deluge:latest\n    container_name: deluge\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Copenhagen\n      - DELUGE_LOGLEVEL=error #optional\n    volumes:\n      - /home/mathzb/docker/deluge:/config\n      - /home/mathzb/downloads:/downloads\n    ports:\n      - 8112:8112\n      - 6881:6881\n      - 6881:6881/udp\n    restart: unless-stopped\n\n  filebot:\n    container_name: filebot\n    image: jlesage/filebot\n    ports:\n      - \"5800:5800\"\n    environment:\n      - USER_ID=1000\n      - GROUP_ID=1000\n      - AMC_ACTION=symlink\n      - AMC_SERIES_FORMAT={plex}\n      - AMC_MOVIE_FORMAT={plex}\n      - AMC_INPUT_DIR=/storage/downloads\n      - AMC_OUTPUT_DIR=/storage/FileBot-Media\n    volumes:\n      - \"/home/mathzb/docker/filebot:/config:rw\"\n      - \"/home/mathzb:/storage:rw\"\n      - \"/home/mathzb/downloads:/watch:rw\"\n      - \"/home/mathzb/FileBot-Media:/output:rw\"\n    restart: unless-stopped\n\n  portainer:\n    container_name: portainer\n    image: portainer/portainer-ce:2.15.0\n    ports:\n      - \"8000:8000\"\n      - \"9443:9443\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /home/mathzb/docker/portainer:/data\n    restart: unless-stopped\n\n  phpmyadmin:\n    image: lscr.io/linuxserver/phpmyadmin:latest\n    container_name: phpmyadmin\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Copenhagen\n      - PMA_ARBITRARY=1 #optional\n      - PMA_ABSOLUTE_URI=http://sql.baungrd.dk #optional\n    volumes:\n      - /home/mathzb/docker/phpmyadmin/config:/config\n    ports:\n      - 8880:80\n    restart: unless-stopped\n\n  unifi-controller:\n    image: lscr.io/linuxserver/unifi-controller:latest\n    container_name: unifi-controller\n    environment:\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - /home/mathzb/docker/unifi:/config\n    ports:\n      - 8443:8443\n      - 3478:3478/udp\n      - 10001:10001/udp\n      - 8080:8080\n      - 8843:8843 #optional\n      - 8881:8880 #optional\n      - 6789:6789 #optional\n      - 5514:5514/udp #optional\n    restart: unless-stopped\n</code></pre>"},{"location":"docker/install-docker-compose/","title":"Installere Docker Compose","text":""},{"location":"docker/install-docker-compose/#introduction","title":"Introduction","text":"<p>Docker simplifies the process of managing application processes in containers. While containers are similar to virtual machines in certain ways, they are more lightweight and resource-friendly. This allows developers to break down an application environment into multiple isolated services.</p> <p>For applications depending on several services, orchestrating all the containers to start up, communicate, and shut down together can quickly become unwieldy. Docker Compose is a tool that allows you to run multi-container application environments based on definitions set in a YAML file. It uses service definitions to build fully customizable environments with multiple containers that can share networks and data volumes.</p> <p>In this guide, you\u2019ll demonstrate how to install Docker Compose on an Ubuntu 22.04 server and how to get started using this tool.</p> Note <p>Starting with Docker Compose v2, Docker has migrated towards using the compose CLI plugin command, and away from the original docker-compose as documented in our previous Ubuntu 20.04 version of this tutorial. While the installation differs, in general the actual usage involves dropping the hyphen from docker-compose calls to become docker compose. For full compatibility details, check the official Docker documentation on command compatibility between the new compose and the old docker-compose.</p>"},{"location":"docker/install-docker-compose/#step-1-installing-docker-compose","title":"Step 1 \u2014 Installing Docker Compose","text":"<p>To make sure you obtain the most updated stable version of Docker Compose, you\u2019ll download this software from its official Github repository.</p> <p>First, confirm the latest version available in their releases page. At the time of this writing, the most current stable version is <code>2.11.2</code>.</p> <p>Use the following command to download:</p> <pre><code>mkdir -p ~/.docker/cli-plugins/\ncurl -SL https://github.com/docker/compose/releases/download/v``2.11.2``/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose\n</code></pre> <p>Next, set the correct permissions so that the docker compose command is executable:</p> <pre><code>chmod +x ~/.docker/cli-plugins/docker-compose\n</code></pre> <p>To verify that the installation was successful, you can run:</p> <pre><code>docker compose version\n</code></pre> <p>You\u2019ll see output similar to this:</p> <pre><code>Output\nDocker Compose version v2.11.2\n</code></pre> <p>Docker Compose is now successfully installed on your system. In the next section, you\u2019ll see how to set up a <code>docker-compose.yml</code> file and get a containerized environment up and running with this tool.</p>"},{"location":"docker/install-docker-compose/#step-2-setting-up-a-docker-composeyml-file","title":"Step 2 \u2014 Setting Up a <code>docker-compose.yml</code> File","text":"<p>To demonstrate how to set up a docker-compose.yml file and work with Docker Compose, you\u2019ll create a web server environment using the official Nginx image from Docker Hub, the public Docker registry. This containerized environment will serve a single static HTML file.</p> <p>Create the <code>docker-compose.yml</code> file:</p> <pre><code>nano docker-compose.yml\n</code></pre> <p>Insert the following content in your docker-compose.yml file:</p> <pre><code>version: \"3.7\"\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8000:80\"\n    volumes:\n      - ./app:/usr/share/nginx/html\n</code></pre> <p>The <code>docker-compose.yml</code> file typically starts off with the <code>version</code> definition. This will tell Docker Compose which configuration <code>version</code> you\u2019re using.</p> <p>You then have the services block, where you set up the <code>services</code> that are part of this environment. In your case, you have a single service called <code>web</code>. This service uses the <code>nginx:alpine</code> image and sets up a port redirection with the <code>ports</code> directive. All requests on port <code>8000</code> of the host machine (the system from where you\u2019re running Docker Compose) will be redirected to the <code>web</code> container on port <code>80</code>, where Nginx will be running.</p> <p>The <code>volumes</code> directive will create a shared volume between the host machine and the container. This will share the local <code>app</code> folder with the container, and the volume will be located at <code>/usr/share/nginx/html</code> inside the container, which will then overwrite the default document root for Nginx.</p> <p>Save and close the file.</p> <p>You have set up a demo page and a <code>docker-compose.yml</code> file to create a containerized web server environment that will serve it. In the next step, you\u2019ll bring this environment up with Docker Compose.</p>"},{"location":"docker/install-docker-compose/#step-3-running-docker-compose","title":"Step 3 \u2014 Running Docker Compose","text":"<p>With the <code>docker-compose.yml</code> file in place, you can now execute Docker Compose to bring your environment up. The following command will download the necessary Docker images, create a container for the <code>web</code> service, and run the containerized environment in background mode:</p> <pre><code>docker compose up -d\n</code></pre> <p>Docker Compose will first look for the defined image on your local system, and if it can\u2019t locate the image it will download the image from Docker Hub. You\u2019ll see output like this:</p> <pre><code>Output\nCreating network \"compose-demo_default\" with the default driver\nPulling web (nginx:alpine)...\nalpine: Pulling from library/nginx\ncbdbe7a5bc2a: Pull complete\n10c113fb0c77: Pull complete\n9ba64393807b: Pull complete\nc829a9c40ab2: Pull complete\n61d685417b2f: Pull complete\nDigest: sha256:57254039c6313fe8c53f1acbf15657ec9616a813397b74b063e32443427c5502\nStatus: Downloaded newer image for nginx:alpine\nCreating compose-demo_web_1 ... done\n</code></pre>"},{"location":"docker/install-docker-compose/#step-4-getting-familiar-with-docker-compose-commands","title":"Step 4 \u2014 Getting Familiar with Docker Compose Commands","text":"<p>You\u2019ve seen how to set up a <code>docker-compose.yml</code> file and bring your environment up with <code>docker compose up</code>. You\u2019ll now see how to use Docker Compose commands to manage and interact with your containerized environment.</p> <p>To check the logs produced by your Nginx container, you can use the <code>logs</code> command:</p> <pre><code>docker compose logs\n</code></pre> <p>You\u2019ll see output similar to this:</p> <pre><code>Output\nAttaching to compose-demo_web_1\nweb_1  | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\nweb_1  | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\nweb_1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\nweb_1  | 10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf\nweb_1  | 10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\nweb_1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\nweb_1  | /docker-entrypoint.sh: Configuration complete; ready for start up\nweb_1  | 172.22.0.1 - - [02/Jun/2020:10:47:13 +0000] \"GET / HTTP/1.1\" 200 353 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\" \"-\"\n</code></pre> <p>If you want to pause the environment execution without changing the current state of your containers, you can use:</p> <pre><code>docker compose pause\n</code></pre> <pre><code>Output\nPausing compose-demo_web_1 ... done\n</code></pre> <p>To resume execution after issuing a pause:</p> <pre><code>docker compose unpause\n</code></pre> <pre><code>Output\nUnpausing compose-demo_web_1 ... done\n</code></pre> <p>The <code>stop</code> command will terminate the container execution, but it won\u2019t destroy any data associated with your containers:</p> <pre><code>docker compose stop\n</code></pre> <pre><code>Output\nStopping compose-demo_web_1 ... done\n</code></pre> <p>If you want to remove the containers, networks, and volumes associated with this containerized environment, use the <code>down</code> command:</p> <pre><code>docker compose down\n</code></pre> <pre><code>Output\nRemoving compose-demo_web_1 ... done\nRemoving network compose-demo_default\n</code></pre> <p>Notice that this won\u2019t remove the base image used by Docker Compose to spin up your environment (in your case, <code>nginx:alpine</code>). This way, whenever you bring your environment up again with a <code>docker compose up</code>, the process will be much faster since the image is already on your system.</p> <p>In case you want to also remove the base image from your system, you can use:</p> <pre><code>docker image rm nginx:alpine\n</code></pre> <pre><code>Output\nUntagged: nginx:alpine\nUntagged: nginx@sha256:b89a6ccbda39576ad23fd079978c967cecc6b170db6e7ff8a769bf2259a71912\nDeleted: sha256:7d0cdcc60a96a5124763fddf5d534d058ad7d0d8d4c3b8be2aefedf4267d0270\nDeleted: sha256:05a0eaca15d731e0029a7604ef54f0dda3b736d4e987e6ac87b91ac7aac03ab1\nDeleted: sha256:c6bbc4bdac396583641cb44cd35126b2c195be8fe1ac5e6c577c14752bbe9157\nDeleted: sha256:35789b1e1a362b0da8392ca7d5759ef08b9a6b7141cc1521570f984dc7905eb6\nDeleted: sha256:a3efaa65ec344c882fe5d543a392a54c4ceacd1efd91662d06964211b1be4c08\nDeleted: sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\n</code></pre>"},{"location":"docker/install-docker-script/","title":"Installere docker med script","text":"<p>Docker provides a convenience script at get.docker.com to install Docker into development environments quickly and non-interactively. The convenience script is not recommended for production environments, but can be used as an example to create a provisioning script that is tailored to your needs. Also refer to the install using the repository steps to learn about installation steps to install using the package repository. The source code for the script is open source, and can be found in the <code>docker-install</code> repository on GitHub.</p> <ul> <li>The script requires root or sudo privileges to run.</li> <li>The script attempts to detect your Linux distribution and version and configure your package management system for you, and does not allow you to customize most installation parameters.</li> <li>The script installs dependencies and recommendations without asking for confirmation. This may install a large number of packages, depending on the current configuration of your host machine.</li> <li>By default, the script installs the latest stable release of Docker, containerd, and runc. When using this script to provision a machine, this may result in unexpected major version upgrades of Docker. Always test (major) upgrades in a test environment before deploying to your production systems.</li> <li>The script is not designed to upgrade an existing Docker installation. When using the script to update an existing installation, dependencies may not be updated to the expected version, causing outdated versions to be used.</li> </ul> <p>Tip: preview script steps before running</p> <p>You can run the script with the <code>DRY_RUN=1</code> option to learn what steps the script will execute during installation: <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nDRY_RUN=1 sh ./get-docker.sh\n</code></pre></p> <p>This example downloads the script from get.docker.com and runs it to install the latest stable release of Docker on Linux:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre>"},{"location":"docker/install-docker/","title":"Installation af Docker","text":"<p>Denne guide f\u00f8lger som udgangspunkt Digitalocean.com.</p>"},{"location":"docker/install-docker/#step-1-installere-docker","title":"Step 1 - Installere docker","text":"<p>The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we get the latest version, we\u2019ll install Docker from the official Docker repository. To do that, we\u2019ll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package.</p> <p>First, update your existing list of packages:</p> <pre><code>sudo apt update\n</code></pre> <p>Next, install a few prerequisite packages which let apt use packages over HTTPS:</p> <pre><code>sudo apt install apt-transport-https ca-certificates curl software-properties-common\n</code></pre> <p>Then add the GPG key for the official Docker repository to your system:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre> <p>Add the Docker repository to APT sources:</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <p>Update your existing list of packages again for the addition to be recognized:</p> <pre><code>sudo apt update\n</code></pre> <p>Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:</p> <pre><code>apt-cache policy docker-ce\n</code></pre> <p>You\u2019ll see output like this, although the version number for Docker may be different:</p> Output of apt-cache policy docker-ce<pre><code>docker-ce:\n  Installed: (none)\n  Candidate: 5:20.10.14~3-0~ubuntu-jammy\n  Version table:\n     5:20.10.14~3-0~ubuntu-jammy 500\n        500 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages\n     5:20.10.13~3-0~ubuntu-jammy 500\n        500 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages\n</code></pre> <p>Notice that <code>docker-ce</code> is not installed, but the candidate for installation is from the Docker repository for Ubuntu 22.04 (<code>jammy</code>).</p> <p>Finally, install Docker:</p> <pre><code>sudo apt install docker-ce\n</code></pre> <p>Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it\u2019s running:</p> <pre><code>sudo systemctl status docker\n</code></pre> <p>The output should be similar to the following, showing that the service is active and running:</p> <pre><code>Output\n\u25cf docker.service - Docker Application Container Engine\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n     Active: active (running) since Fri 2022-04-01 21:30:25 UTC; 22s ago\nTriggeredBy: \u25cf docker.socket\n       Docs: https://docs.docker.com\n   Main PID: 7854 (dockerd)\n      Tasks: 7\n     Memory: 38.3M\n        CPU: 340ms\n     CGroup: /system.slice/docker.service\n             \u2514\u25007854 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n</code></pre> <p>Installing Docker now gives you not just the Docker service (daemon) but also the <code>docker</code> command line utility, or the Docker client. We\u2019ll explore how to use the <code>docker</code> command later in this tutorial.</p>"},{"location":"docker/install-docker/#step-2-executing-the-docker-command-without-sudo-optional","title":"Step 2 - Executing the Docker Command Without Sudo (Optional)","text":"<p>By default, the <code>docker</code> command can only be run the root user or by a user in the <code>docker</code> group, which is automatically created during Docker\u2019s installation process. If you attempt to run the <code>docker</code> command without prefixing it with sudo or without being in the <code>docker</code> group, you\u2019ll get an output like this:</p> <pre><code>Output\ndocker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.\nSee 'docker run --help'.\n</code></pre> <p>If you want to avoid typing <code>sudo</code> whenever you run the <code>docker</code> command, add your username to the <code>docker</code> group:</p> <pre><code>sudo usermod -aG docker ${USER}\n</code></pre> <p>To apply the new group membership, log out of the server and back in, or type the following:</p> <pre><code>su - ${USER}\n</code></pre>"},{"location":"docker/uninstall-docker/","title":"Afinstallere Docker Engine","text":"<p>Uninstall the Docker Engine, CLI, Containerd, and Docker Compose packages:</p> <pre><code>sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> <p>Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre> <p>Note</p> <p>You must delete any edited configuration files manually.</p>"},{"location":"mikrotik/baisc-commands/","title":"Baisc Commands","text":"<pre><code>[?]             Gives the list of available commands\ncommand [?]     Gives help on the command and list of arguments\n\n[Tab]           Completes the command/word. If the input is ambiguous a second [Tab] gives possible options\n\n/               Move up to base level\n..              Move up one level\n/command        Use command at the base level\n</code></pre>"},{"location":"mikrotik/create-network/","title":"Oprettelse af nyt netv\u00e6rk","text":"Opret Pool Range<pre><code>/ip pool set Lan ranges=172.16.20.10-172.16.20.254\n</code></pre> S\u00e6t addresse og netv\u00e6rk<pre><code>/ip address set [find where interface=Lan] address=172.16.20.1/24 comment=\"default configuration\" interface=Lan network=172.16.20.0\n</code></pre> Opret DHCP netv\u00e6rk p\u00e5 LAN interface<pre><code>/ip dhcp-server network set [find where interface=Lan] address=172.16.20.0/24 comment=\"Lan DHCP\" dns-server=8.8.8.8,8.8.4.4 gateway=172.16.20.1 netmask=24\n</code></pre> Aktiver DHCP Server samt navngiv<pre><code>/ip dhcp-server set \"Lan DHCP Server\" disabled=no\n</code></pre> Giv Mikrotik en statistk DNS server<pre><code>/ip dns static set 0 address=1.1.1.1 name=router\n</code></pre>"},{"location":"mikrotik/dhcp-server-ip-scope/","title":"Basic DHCP &amp; IP Scope commands","text":"Deaktiver DHCP Server<pre><code>/ip dhcp-server disable \"Lan DHCP Server\"\n</code></pre> Aktiver DHCP Server<pre><code>/ip dhcp-server enable \"Lan DHCP Server\"\n</code></pre> Skift DNS<pre><code>/ip dhcp-server network set 0 dns-server=8.8.8.8,8.8.4.4\n</code></pre> \u00c6ndre Scope &amp; DHCP<pre><code>/ip pool set Lan ranges=10.10.0.10-10.10.0.254\n/ip dhcp-server network set 0 address=10.10.0.0/24 gateway=10.10.0.1 netmask=24\n/ip address set 0 address=10.10.0.1/24 interface=bridge-local network=10.10.0.0\n</code></pre> DHCP Reservation<pre><code>/ip dhcp-server lease add address=10.10.0.XX mac-address=00:04:13:77:XX:XX server=\"Lan DHCP Server\" comment=\"NAVN\"\n</code></pre> Se DHCP Lease<pre><code>/ip dhcp-server lease print\n</code></pre> Slet DHCP Lease<pre><code>/ip dhcp-server lease remove \"ID\"\n</code></pre>"},{"location":"mikrotik/portforward/","title":"Portforwarding","text":""},{"location":"mikrotik/portforward/#eksemple-pa-portforwarding","title":"Eksemple p\u00e5 portforwarding","text":"Type Beskrivelse <code>dst-port</code> Porten der skal komme trafik ind p\u00e5 (188.180.38.24:4353) <code>protocol</code> Protokollen trafikken kommer ind p\u00e5 (tcp eller udp) <code>to-addresses</code> Den interne IP adresse trafikken skal dirigeres til (192.168.100.100) <code>to-ports</code> Den port i det interne netv\u00e6rk trafikken skal dirigeres til. Hvis denne ikke bliver udfyldt kommer trafikken p\u00e5 samme port som pakkerne er kommet ind p\u00e5. <code>in-interface</code> Denne SKAL v\u00e6re sat. Hvis ikke bliver alt trafik ramt af port forward reglen og dirigeret til to-addresses. <pre><code>/ip firewall nat add action=dst-nat chain=dstnat dst-port=xxxx in-interface=Internet protocol=xxx to-addresses=xxx.xxx.xxx.xxx to-ports=xxxx\n</code></pre>"},{"location":"mikrotik/portforward/#dmz","title":"DMZ","text":"<p>For at oprette en dmz skal man lave en portforward uden porten</p> <pre><code>/ip firewall nat add action=dst-nat chain=dstnat in-interface=Internet to-addresses=xxx.xxx.xxx.xxx\n</code></pre> <p>Warning</p> <p>Man skal dog v\u00e6re opm\u00e6rksom p\u00e5 at hvis man har oprettet en DMZ kan man ikke f\u00e5 fat i routeren udefra!</p>"},{"location":"mikrotik/static-ip-wan/","title":"Statisk IP p\u00e5 WAN","text":"<p><code>Print</code> kan med fordel bruges undervejs hvis du ikke er sikker p\u00e5 interface navn mm.</p> S\u00e6t IP p\u00e5 WAN interface<pre><code>/ip address add address=xxx.xxx.xxx.xxx/SUBNETPREFIX interface=Internet\n</code></pre> S\u00e6t default gateway<pre><code>/ip route add distance=1 gateway=xxx.xxx.xxx.xxx\n</code></pre> Deaktiver DHCP p\u00e5 WAN<pre><code>/ip dhcp-client remove numbers=0\n</code></pre> S\u00e6t DNS<pre><code>/ip dns set servers=xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx\n</code></pre>"},{"location":"mikrotik/vlan-wan-tagging/","title":"Vlan WAN Tag","text":"<p>I nogen tilf\u00e6lde s\u00e5 bliver man n\u00f8dtil at VLAN tagge sit WAN interface for at kunne f\u00e5 tildelt en IP Adresse fra sin ISP. \\ Hvis dette ikke g\u00f8res, s\u00e5 f\u00e5r man ikke internetadgang. \\</p> <p>Log p\u00e5 WINBOX og derefter tryk p\u00e5 \"Interfaces\" -&gt; Opret et VLAN ved at trykke p\u00e5 \"+\" ikonet i toppen af venstre hj\u00f8rne i det nye vindue.</p> Type Beskrivelse <code>Name</code> F.eks. VLAN-WAN <code>VLAN ID</code> Oplyst fra ISP <code>Interface</code> ether1 (Internet) <p>Resten skal forblive default.  </p> <p>Derefter g\u00e5 til\u00a0Interface List\u00a0\u2192 Og tryk p\u00e5\u00a0WAN, og \u00e6ndre\u00a0Interface\u00a0til dit nylig oprettet VLAN.  </p> <p>Den sidste ting der skal g\u00f8res nu er at opdatere DHCP Client til at foresp\u00f8rge p\u00e5 det rigtige VLAN Interface. I menuen til venstre tryk p\u00e5\u00a0\"IP\" \u2192 \"DHCP Client\"\u00a0og dobbeltklik p\u00e5\u00a0defcon.</p> Type Beskrivelse <code>Interface</code> Dit nylig oprettet VLAN <code>Use Peer\u00a0DNS</code> false <code>Use Peer\u00a0NTP</code> false <code>Add Default Route</code> Yes <p>Resten skal v\u00e6re default.</p>"},{"location":"mikrotik/vlan/","title":"Simpel VLAN routing","text":"Opret VLAN med navn og ID<pre><code>/interface vlan add name=VLAN2 vlan-id=2 interface=Lan disabled=no\n</code></pre> Tildel IP adresser til VLAN interfaces<pre><code>/ip address add address=192.168.10.1/24 interface=VLAN2\n</code></pre> <p>Note</p> <p>Tildeling af DHCP Server kan laves via WinBox ved hj\u00e6lp af DHCP Wizarden</p>"}]}